<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[微信小程序学习笔记]]></title>
    <url>%2F2017%2F10%2F16%2Flearn-wxapp-first%2F</url>
    <content type="text"><![CDATA[目录结构 一个小程序的目录结构，包含app.js,app.json,app.wxss和pages,utils等文件其中：app.js为脚本文件，在这个文件中处理小程序的生命周期函数，申明全局变量，调用框架API和定义通用函数等。1234567891011121314151617181920212223242526272829//app.jsApp(&#123; onLaunch: function () &#123; //调用API从本地缓存中获取数据var logs = wx.getStorageSync('logs') || [] logs.unshift(Date.now()) wx.setStorageSync('logs', logs) &#125;, getUserInfo:function(cb)&#123; var that = this; if(this.globalData.userInfo)&#123; typeof cb == "function" &amp;&amp; cb(this.globalData.userInfo) &#125;else&#123; //调用登录接口 wx.login(&#123; success: function () &#123; wx.getUserInfo(&#123; success: function (res) &#123; that.globalData.userInfo = res.userInfo; typeof cb == "function" &amp;&amp; cb(that.globalData.userInfo) &#125; &#125;) &#125; &#125;); &#125; &#125;, globalData:&#123; userInfo:null &#125;&#125;) app.json为小程序配置文件，可以配置小程序的页面组成，窗口背景色，导航条样式，默认标题等。注：不能添加任何注释。123456789101112&#123; "pages":[ "pages/index/index", "pages/logs/logs" ], "window":&#123; "backgroundTextStyle":"light", "navigationBarBackgroundColor": "#fff", "navigationBarTitleText": "WeChat", "navigationBarTextStyle":"black" &#125;&#125; app.wxss是整个小程序的公共样式表，我们可以像在css中定义class属性的样式一样使用app.wxss中声明的样式规则。 页面结构 每一个小程序页面是由同路径下同名的四个不同后缀文件的组成，如：index.js、index.wxml、index.wxss、index.json。.js后缀的文件是脚本文件，.json后缀的文件是配置文件，.wxss后缀的是样式表文件，.wxml后缀的文件是页面结构文件。*指定小程序的首页，默认app.json中的pages中的第一项为小程序的首页。 总的来说，小程序由三个部分组成:配置，逻辑，和视图 配置 .json文件为配置文件，主要配置当前小程序的基本信息，比如tab，标题，背景，导航样式等信息。其中，page.json为全局配置，在page中也有相应的.json,对于同属性配置页面级覆盖page.json逻辑： .js文件为逻辑层，逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。 在 JavaScript 的基础上，我们做了一些修改，以方便地开发小程序。 - 增加 App 和 Page 方法，进行程序和页面的注册。 - 增加 getApp 和 getCurrentPages 方法，分别用来获取 App 实例和当前页面栈。 - 提供丰富的 API，如微信用户数据，扫一扫，支付等微信特有能力。 - 每个页面有独立的作用域，并提供模块化能力。 - 由于框架并非运行在浏览器中，所以 JavaScript 在 web 中一些能力都无法使用，如 document，window 等。 - 开发者写的所有代码最终将会打包成一份 JavaScript，并在小程序启动的时候运行，直到小程序销毁。类似 ServiceWorker，所以逻辑层也称之为 App Service。 视图.WXML 与 .WXSS框架的视图层由 WXML 与 WXSS 编写，由组件来进行展示。将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。WXML(WeiXin Markup language)用于描述页面的结构。WXSS(WeiXin Style Sheet)用于描述页面的样式。组件(Component)是视图的基本组成单元。 demo 项目地址]]></content>
      <tags>
        <tag>-小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript权威指南读书笔记—字符串]]></title>
    <url>%2F2017%2F10%2F16%2Flearn-javascript-string-note%2F</url>
    <content type="text"><![CDATA[字符串 javascript采用utf-16编码unicode字符集，js字符串则由一组无序号的16位值组成的序列。 字符串长度 字符串长度length等于组成字符串的16位值unicode序列的个数。空字符串的长度为0。一些不能使用16位unicode表示的字符也遵循utf-16的编码规则；用两个16位的unicode组成一个序列。所以长度length等于2的字符串有可能表示的是一个unicode字符 字符串索引 字符串索引和数组一样，索引以0开始表示第一个位置，通过charAt（index）可以访问某个索引上表示的字符。 字符串直接量 字符串直接量是单引号或者双引号括起来的字符序列。双引号或者单引号中可以包含单引号或者双引号特性 es3中规定字符串直接量必须在一行中，eg:1var s = 'hello world'; 但在es5中支持多行，以‘\’反斜杠链接；eg:12var S = 'hello\world' 字符串转义 在JavaScript中“\”反斜杠有着特殊的用途，通常反斜杠后面加上一个字符，就不再标识本身的含义了，比如。\n标识换行符。以下为JavaScript中定义的转义字符，如果\没有位于以下字符前，那么会忽略\ \0 nul字符 \u0000 \b 退格符 “dfsfdsfsfdfsf” \t 水平制表符 \n 换行符 \v 垂直制表符 “dfsfdsfsfdfsf “ \f 换页符 \r 回车符 \” 双引号 \’ 单引号 \ 反斜杠 \xXX 由两位十六进制数XX组成的latin-1字符 \UXXXX 由四位十六进制数XXXX组成的unicode字符 字符串常用方法123456789101112var s = 'hello,word!'s.charAr(0) //获取字符串第一个字符s.substr(1,4)//获取字符串第一个字符到第5个字符s.substring(1,4)// 截取字符串第2位到第四位的字符s.slice(1,4) // 截取字符串第2位到第四位的字符 同上s.slice(-3) // 负数倒叙，截取最后三位字符s.split(',')// 分割成数组['hello','world!']s.indexOf('l')//字符l首次出现的位置s.lastIndexOf('l)//字符l最后一次出现的位置s.replace('h',"H")//字符串匹配替换，全文s.toUppperCase()//转化成大写字母s.toLocaleLowerCase/toLowerCase //转化成小写，locale只有少数本地语言下有特定的大小写映射（土耳其）]]></content>
      <tags>
        <tag>-JavaScript</tag>
      </tags>
  </entry>
</search>
